Thread local storage can theroritcally be accessed by a different tyhread if it somehow obtains the
address of the data in another thread so we should have an option whether to test race conditions
for thread local storage or not (the defualt should be not to massivelyu cut down compile times).



Even if a value is global, you still need seperate type maps per hart, since each hart can still treat it as a different type.

//////////////////////////

The problem occurs since the program iterates through all type/hart combinations for 2 harts e.g. (u8,u8), (u8,u16) until (u8,i64) finding none valid.
It then restarts again at (u8,) then finds no valid type for hart 2, thus returns, leading to an endless loop, we need to rework it so when it finds
no type valid for a higher number hart, it advances the type for the next lower numbered hart e.g. moves to (i8,..).

//////////////////////////

There needs to be an optimization that pulls failure conditions to the earliest positions they can be.

E.g.
```
if typeof x != U8 U16 U32
    fail
```
would be very expensive if there was a large path we needed to explore before reaching this to fail
when checking the other types.

This check could be pulled to the start of the program so exploring the other paths is faster
and we reach the valid path in a reasonable time.


Structure of type structure will be:
```
struct Type {
  type: u64, // e.g. 0 if u8 or 1 if list
  len: u64, // e.g. 0 if u8 or N if list
  addr: *Type // points to types in list if list, else null
}
```

We are searching for a coodinate in the type space that allows a valid path.
```rust
struct TypeCoordinate<HARTS: usize> {
  BTreeMap<Hart, BTreeMap<Label,Type>>
}
```
When the current coordinate is discovered to be invalid, we pick up the nearest coordinate we have not already explored.